#水平分库，同时水平分表

# 数据源名称，多数据源以逗号分隔
spring.shardingsphere.datasource.names=db1,db2

#配置同一个实体对应两张不同的表名（尽管内容相同）
spring.main.allow-bean-definition-overriding=true

#数据库连接属性
spring.shardingsphere.datasource.db1.type= com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.db1.driver-class-name= com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.db1.url= jdbc:mysql://localhost:3306/sharding_course_db1?serverTimezone=Asia/Shanghai
spring.shardingsphere.datasource.db1.username= root
spring.shardingsphere.datasource.db1.password= 123456

#数据库连接属性
spring.shardingsphere.datasource.db2.type= com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.db2.driver-class-name= com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.db2.url= jdbc:mysql://localhost:3306/sharding_course_db2?serverTimezone=Asia/Shanghai
spring.shardingsphere.datasource.db2.username= root
spring.shardingsphere.datasource.db2.password= 123456

#配置主从数据库 主:db1  从:db2
spring.shardingsphere.sharding.master-slave-rules.ds0.masterDataSourceName=db1
spring.shardingsphere.sharding.master-slave-rules.ds0.slaveDataSourceNames=db2

#配置t_order表规则（垂直差分表）（只操作一个数据库，一张数据表）
spring.shardingsphere.sharding.tables.t_order.actual-data-nodes=ds0.t_order
# 分布式序列策略配置  按那个字段分表，该字段值的产生规则
spring.shardingsphere.sharding.tables.t_order.keyGenerator.column=order_id
spring.shardingsphere.sharding.tables.t_order.keyGenerator.type=SNOWFLAKE

#打印执行的sql语句
spring.shardingsphere.props.sql.show=true

