#水平分库，同时水平分表

# 数据源名称，多数据源以逗号分隔
spring.shardingsphere.datasource.names=db1,db2

#配置同一个实体对应两张不同的表名（尽管内容相同）
spring.main.allow-bean-definition-overriding=true

#数据库连接属性
spring.shardingsphere.datasource.db1.type= com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.db1.driver-class-name= com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.db1.url= jdbc:mysql://localhost:3306/sharding_course_db1?serverTimezone=Asia/Shanghai
spring.shardingsphere.datasource.db1.username= root
spring.shardingsphere.datasource.db1.password= 123456

#数据库连接属性
spring.shardingsphere.datasource.db2.type= com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.db2.driver-class-name= com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.db2.url= jdbc:mysql://localhost:3306/sharding_course_db2?serverTimezone=Asia/Shanghai
spring.shardingsphere.datasource.db2.username= root
spring.shardingsphere.datasource.db2.password= 123456

# 配置 t_course 表规则(分库分表)
spring.shardingsphere.sharding.tables.t_course.actual-data-nodes=db$->{1..2}.t_course_$->{1..2}
# 分布式序列策略配置  按那个字段分表，该字段值的产生规则
spring.shardingsphere.sharding.tables.t_course.keyGenerator.column=cid
spring.shardingsphere.sharding.tables.t_course.keyGenerator.type=SNOWFLAKE

#配置t_user表规则（垂直差分表）（只操作一个数据库，一张数据表）
spring.shardingsphere.sharding.tables.t_user.actual-data-nodes=db$->{1}.t_user
# 分布式序列策略配置  按那个字段分表，该字段值的产生规则
spring.shardingsphere.sharding.tables.t_user.keyGenerator.column=user_id
spring.shardingsphere.sharding.tables.t_user.keyGenerator.type=SNOWFLAKE

#配制t_item表规则（广播该公共表）（db1,db2,两个数据库里面都有该表，表名和结构一模一样）
spring.shardingsphere.sharding.broadcast-tables=t_item
# 分布式序列策略配置  按那个字段分表，该字段值的产生规则
spring.shardingsphere.sharding.tables.t_item.keyGenerator.column=item_id
spring.shardingsphere.sharding.tables.t_item.keyGenerator.type=SNOWFLAKE

#配制分库策略(根据user_id字段来进行分库)，偶数就添加到db1，奇数就添加到db2
# 改配制方法是对所有的表都根据user_id来进行分库
#如果需要对单个表进行配制，就需要使用下面的配制方法
#spring.shardingsphere.sharding.default-database-strategy.inline.sharding-column=user_id
#spring.shardingsphere.sharding.default-database-strategy.inline.algorithm-expression=db$->{user_id%2 + 1}
#配制单表的分库策略
spring.shardingsphere.sharding.tables.t_course.databaseStrategy.inline.shardingColumn=user_id
spring.shardingsphere.sharding.tables.t_course.databaseStrategy.inline.algorithmExpression=db$->{user_id%2 + 1}

# 配置分表策略(根据cid字段来进行分库),偶数就添加到t_course_1，奇数就添加到t_course_2
# 就是配置数据按那个字段,该字段的值,对数据写入不同的数据表
spring.shardingsphere.sharding.tables.t_course.tableStrategy.inline.shardingColumn=cid
spring.shardingsphere.sharding.tables.t_course.tableStrategy.inline.algorithmExpression=t_course_$->{cid%2 + 1}

#打印执行的sql语句
spring.shardingsphere.props.sql.show=true

